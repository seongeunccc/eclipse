package Week2_Wed;
/*
 * 	인터페이스는 추상클래스보다 더 추상화된 구조
 * 	상수, 추상메소드
 * 	
 * 	인터페이스는 깡통 : 상수랑 추상메소드만 가지고 있기 때문.
 * 
 * 	인터페이스는 다중상속을 대체
 * 	구현객체(인터페이스를 받는 객체)는 무조건 오버라이딩을 제공해야 객체를 생성.
 * 	오버라이딩 안하면 추상메소드화 => 객체를 만들 수 없음. 
 * 	
 * 	인터페이스 여러개 줄 때 클래스 이름 뒤에 이런식으로 나열하면 됨.
 * 	(implements + 클래스 명 / ex - implements AAA, BBB)
 * 
 * 	인터페이스끼리는 상속가능
 */
public interface AAA {
	final static int A = 10;  
	//인터페이스에는 상수만 가능(변수불가) (final static)이 항상 생략되어 있음.
	
	abstract void disp();  //추상메소드지만 abstract 생략가능 : 어차피 추상메소드밖에 못쓰니까
	

}
