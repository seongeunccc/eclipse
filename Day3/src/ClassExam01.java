/*
 * 클래스의 구성요소
 * 1. field : 객체가 생성된 후 지속적으로 사용되어지는 '변수' 
 * 	- 접근 지정자 주로 private
 * 	- static, final(읽기 전용)
 * 	- instance field, static field
 * 	-
 * 
 * 	필드는 객체가 생성되면 같이 생성되므로 heap 영역에 데이터 생성됨. -> 지역변수처럼 초기화하지 않아도 0 값을 가지고 있음.
 *  (읽기 전용, 값을 변경 불가-변수에 final 적용하면 상수화, 
 * 	static 은 하나만 생성되고 final은 수를 변경할 필요가 없어서 파이널은 static 으로 주로 사용)
 * 	static은 객체 생성 여부와 상관 없이 이미 생성되어 있음. 
 * 	그래서 어떤 객체에서 참조하든 같은 값이 적용됨. 그래서 공유하고자 할 때 static 으로 함. / static 으로 선언하면 참조할 때 메모리 새로 생기지 않음. 
 * 	객체당 한개씩 사용할 데이터면 인스턴스로 사용, 모두가 공유할 데이터면 static으로 사용하면 됨.
 *	가독성을 위해 맨위에서 사용함 
 * 	객체가 생성될 때 생성되고 객체가 아예 사라질 때까지 남아있음. 지속적으로 사용할 변수만 필드로 빼고, 잠깐 사용할 변수는 지역변수로 활용하면 됨
 * 	안에 있는 메소드들이 모두 사용가능..! 함수 호출할 때마다 값을 줄 필요 없이 / 데이터를 주고받을 필요 없이 긁어와서 사용가능.
 * 	클래스 사용하는 동안 계속 사용할 데이터면 필드로 빼기
 * 
 * 2. constructor(생성자 함수)
 * 	- 객체 생성시 자동 호출 되어지는 함수( 딱 1번만 불러짐)
 *	- 생성자 함수를 명시적으로 제공하지 않을 경우 디폴드 생성자를 제공.(내부적으로 생성, 안보여도 있음.)
 *	- 리턴타입이 존재하지 않고, 함수명은 클래스명과 동일. / 객체 생성시 한번만 실행되므로 리턴값 없음.
 * 	- 기능
 * 	1) 디폴트기능 : 객체 등록.
 * 	2) 사용자기능 : 객체 생성시 필드 초기화 / 시작할 때 0이 아니라 다른 값을 가지고 시작하고 싶을 때 
 * 	- 오버로딩이 가능. / 
 * 	- 접근지정자를 주로 public으로 지정함.
 * 	- 디폴트 생성자를 명시적으로 만들 경우, 숨어있는 디폴트는 제공하지 않는다.
 * 	- 명시적으로 생성자를 하나 이상(오버로딩) 만들 경우, 디폴트는 제공하지 않는다.(생성자를 하나도 만들지 않는 경우만 디폴트 생성)
 * 
 * 3. method
 * 	- 외부에서 내부의 필드를 접근해서 사용할 수 있게 하기 위해서 사용. / 필드 관리 역할 , 필드를 사용할 수 있게 하는 역할.
 * 	- 접근지정자를 주로 public 으로 지정 / private으로 지정 가능하나 그럼 그 메소드 호출 불가.
 * 	- Instance method, static method
 * 	=> 'this 여부' 
 * 	 	문법적인 가장 큰 차이점은 'this 여부', this 는 객체를 구분함. instance 메소드는 this가 무조건 들어있음.
 * 		따로 작성 안해도 instance method 가 실행된 이유는 작성하지 않아도 실행하는 default 값이기 떼문
 *  - 오버로딩이 가능하다.(편의성) 
 *  - 함수는 함수가 필요할 때 호출(main 함수 제외)
 *  
 *  오버로딩 : 동일한 함수명으로 여러개의 함수를 만들어서 제공.(다형성-시험문제에 꼭 나옴)
 *  - '같은 기능을 수행하는 것'을 하나의 이름으로 묶어서 제공함으로써 사용자가 편하개 쓸 수 있게 해주는 기능.
 *  - 함수명을 동일하게 하면서 (매개변수, 인자, agument)를 구분을 할 수 있어야 한다. 
 *  	- 1. 매개변수 개수가 다를 경우. 
 *  	- 2. 매개변수 타입이 다를 경우
 */
package src;

public class ClassExam01 {

	private int a;
	private char s;
	private float c;
	
	public static void main(String[] args) {
		ClassExam01 ce= new ClassExam01();		//생성자 호출
		
		ce.output(1,2);
		ce.output(3.4);
		ce.output(11);
		
		
	}

	public void output(int a) {
		System.out.println("a");
	}
	
	public void output(int ab, int a) {
		System.out.println("a,b");
	}

	public void output(double a) {
		System.out.println("b");
	}
	
}
